_ = require('lodash')
Decimal = require('big.js')

defineProperties = require('utils/define-properties')
sum = require('utils/sum')

### @ngInject ###
module.exports = (ContributionModel, UserModel, AuthService) ->
  class BucketModel
    constructor: (data = {}) ->
      @id = data.id
      @name = data.name
      @roundId = data.roundId
      @description = data.description
      @user = new UserModel(data.user)
      @target = new Decimal(data.targetCents or 0).div(100)

      @contributions = _.map data.contributions, (contribution) ->
        # attach bucketId to contribution, as the data
        # returned from the API does not have this
        contrib = _.extend(_.clone(contribution), bucketId: data.id)
        new ContributionModel(contrib)

      defineProperties @,
        contributionTotal:
          deps: ['contributions']
          get: ->
            sum(_.pluck @contributions, "amount")

        myContributionIndex:
          deps: ['contributions']
          get: ->
            _.findIndex @contributions, (contribution) ->
              contribution.user.id == AuthService.getCurrentUser().id

        myContribution:
          deps: ['myContributionIndex', 'contributions']
          get: ->
            index = @myContributionIndex
            if index != -1
              @contributions[index]
            else
              currentUser = AuthService.getCurrentUser()
              new ContributionModel({
                user:
                  id: currentUser.id
                  name: currentUser.name
                bucketId: @id
                amountCents: 0
              })

        groupContributions:
          deps: ['contributions']
          get: ->
            _.filter @contributions, (contribution) ->
              contribution.user.id != AuthService.getCurrentUser.id

        percentageFunded:
          deps: ['contributionTotal', 'target']
          get: ->
            @contributionTotal.div(@target)

        myContributionPercentage:
          deps: ['myContribution', 'target']
          get: ->
            @myContribution.amount.div(@target)

        groupContributionPercentage:
          deps: ['percentageFunded', 'myContributionPercentage']
          get: ->
            @percentageFunded.minus(@myContributionPercentage)

        groupContribution:
          deps: ['contributionTotal', 'myContribution']
          get: ->
            @contributionTotal.minus(@myContribution.amount)

    serialize: ->
      {
        id: @id
        name: @name
        description: @description
        userId: @user.id
        targetCents: @target.times(100).toFixed(0)
        roundId: @roundId
      }

    getContributionsByUser: () ->
      contributions = {}
      _.each @contributions, (contribution) ->
        contributions[contribution.user.id] = contribution
      contributions
