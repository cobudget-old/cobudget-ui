/* @ngInject */
module.exports = function (BaseModel, BaseCollection, MembershipModel, RoundModel) {
  return BaseModel.extend({
    modelType: 'Group',

    props: {
      name: 'string',
    },

    collections: {
      rounds: BaseCollection.extend({
        model: RoundModel,
      }),
      memberships: BaseCollection.extend({
        model: MembershipModel,
        comparator: function (membership) {
          return membership.member.name.toLowerCase();
        },
      }),
    },

    initialize: function () {
      // listen to rounds events
      this.listenTo(this.rounds, 'all',
        this._getEventBubblingHandler(this.rounds)
      );
    },

    derived: {
      members: {
        deps: ['memberships'],
        cache: false,
        fn: function () {
          return this.memberships.pluck('member');
        },
      },
    },

    getMembership: function (member) {
      if (typeof this.memberships === 'undefined') {
        throw new Error(`\
          Unable to find member ${member.id} \
          membership in group ${this.id}, do not \
          have access to memberships\
        `);
      }

      return this.memberships.find(function (m) {
        return m.member.id === member.id;
      });
    },

    isAdmin: function (member) {
      var membership = this.getMembership(member);
      return membership && membership.isAdmin;
    },

    isMember: function (member) {
      return !!this.getMembership(member);
    },
  });
};
