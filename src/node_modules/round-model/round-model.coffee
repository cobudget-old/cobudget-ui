Decimal = require('big.js')

module.exports = (AllocationModel, BucketModel, FixedCostModel) ->
  class RoundModel
    constructor: (data = {}) ->
      @id = data.id
      @name = data.name
      @groupId = data.group_id
      @allocations = _.map data.allocations, (allocation) ->
        new AllocationModel(allocation)
      @buckets = _.map data.buckets, (bucket) ->
        new BucketModel(bucket)
      @fixedCosts = _.map data.fixed_costs, (fixedCost) ->
        new FixedCostModel(fixedCost)

    getMyContributions: ->
      @myContributions = _.map @buckets, (bucket) ->
        bucket.myContribution

    getMyAllocationsLeftCents: (myAllocationsCents) ->
      myContributionsCents = _.reduce _.pluck(@myContributions, "amountCents"), (sum, num) ->
        sum + num
      @myAllocationsLeftCents = myAllocationsCents - myContributionsCents


    getStatus: ->
      if (@myAllocationsLeftCents > 0)
        null
      else if (@myAllocationsLeftCents == 0)
        'complete'
      else
        'warning'

    getAllocationsByUser: ->
      # index allocations by user id
      allocationsByUserId = {}
      _.each @allocations, (allocation) ->
        allocationsByUserId[allocation.userId] = allocation
      allocationsByUserId

    getContributors: (memberships) ->
      contributors = {}

      allocationsByUserId = @getAllocationsByUser()

      # for each member
      _.each memberships, (membership) ->
        contributor = {
          user: membership.user
        }

        allocation = allocationsByUserId[contributor.user.id]

        if (allocation)
          contributor.allocationCents = allocation.amountCents

        contributor.allocation = contributor.allocationCents / 100

        contributors[contributor.user.id] = contributor

      # for each bucket
      _.each @buckets, (bucket) ->
        contributions = bucket.getContributionsByUser()

        # add contributions to contributors
        _.each contributions, (contribution, userId) ->

          contributor = contributors[userId]

          if not contributor.contributionCents
            contributor.contributionCents = contribution.amountCents
          else
            contributor.contributionCents += contribution.amountCents

          contributor.contribution = contributor.contributionCents / 100

      contributors

    getFixedCostCents: ->
      @fixedCostCents =
        _.reduce(_.pluck(@fixedCosts, "amount"), (sum, num) ->
          sum.plus(num or new Decimal(0))
        , new Decimal(0))
        .times(100).toFixed(0)

