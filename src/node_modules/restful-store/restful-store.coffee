_ = require('lodash')
debug = require('debug')("restful-store")
recase = require('recase').create({})

### @ngInject ###
module.exports = ($http, config) ->
  class RestfulStore
    constructor: (opts = {}) ->
      debug("constructor", opts)
      @baseUrl = opts.baseUrl or config.apiEndpoint
      @singular = opts.singular
      @plural = opts.plural
      @Model = opts.Model

    serialize: (model) ->
      debug("serialize", model)
      object = {}
      if Array.isArray(model)
        models = model
        object[@plural] = _.map models, (model) ->
          model.serialize()
      else
        object[@singular] = model.serialize()
      object = recase.snakeCopy(object)
      debug("serialized", object)
      object

    deserialize: (object) ->
      debug("deserialize", object)
      object = recase.camelCopy(object)
      if object[@plural]?
        objects = object
        self = @
        model = _.map objects[@plural], (object) ->
          new self.Model(object)
      else
        object = object[@singular]
        model = new @Model(object)
      debug("deserialized", model)
      model

    path: (params = {}, op) ->
      debug("path", params, op)
      plural = recase.snakify(@plural)
      if params.id?
        "#{@baseUrl}/#{plural}/#{params.id}"
      else
        "#{@baseUrl}/#{plural}"

    all: (params) ->
      path = @path(params, "all")
      debug("all", path, params)
      self = @
      $http.get(path, params).then (response) ->
        debug("all res", response)
        self.deserialize(response.data)

    get: (model) ->
      if typeof model == "string" or typeof model == "number"
        model = id: model
      path = @path(model, "get")
      debug("get", path)
      self = @
      $http.get(path).then (response) ->
        debug("get res", response)
        self.deserialize(response.data)

    create: (model) ->
      path = @path(model, "create")
      object = @serialize(model)
      debug("create", path, object)
      self = @
      $http.post(path, object).then (response) ->
        debug("create res", response)
        self.deserialize(response.data)

    update: (model) ->
      path = @path(model, "update")
      object = @serialize(model)
      debug("update", path, object)
      self = @
      $http.put(path, object).then (response) ->
        debug("update res", response)
        self.deserialize(response.data)

    remove: (model) ->
      path = @path(model, "remove")
      debug("remove", path)
      $http.delete(path).then (response) ->
        debug("remove res", response)
        delete model.id

    save: (unsaved) ->
      debug("save", unsaved)
      if unsaved.id
        @update(unsaved)
      else
        @create(unsaved).then (saved) ->
          unsaved.id = saved.id
          saved
