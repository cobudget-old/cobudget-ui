module.exports = ($scope, $stateParams, $modal, RoundsStore, ContributionsStore, AuthService, BucketsStore, group, round) ->

  ///Lots of this should be abstracted into a service///

  $scope.currentUserId = AuthService.getCurrentUser().id
  $scope.isAdmin = group.isAdmin(AuthService.getCurrentUser())

  $scope.loadContributorDetails = () ->
    RoundsStore.getContributorDetails($scope.round.id, $scope.currentUser.id).then (details) ->
      $scope.myRoundDetails = details
      $scope.round.myAllocationsLeftCents = details.fundsLeftCents
      $scope.round.myAllocationsAmountCents = details.allocationAmountCents
      $scope.status = $scope.round.getStatus()

  $scope.saveContribution = (contribution) ->
    # if we're gonna have a bad time
    if $scope.status == 'warning'
      # gtfo
      return
    contribution.save(ContributionsStore).then ->
      $scope.loadContributorDetails()
      BucketsStore.get(contribution.bucketId).then (bucket) ->
        roundBucket = _.find round.buckets, { id: bucket.id }
        roundBucket.contributionTotalCents = bucket.contributionTotalCents

  $scope.openNewBucketModal = ->
    $modal.open(
      template: require('./new-bucket-modal.html')
      controller: require('./new-bucket-modal.coffee')
      size: 'lg'
      resolve:
        round: ->
          round
        group: ->
          group
        memberships: (MembershipsStore) ->
          MembershipsStore.all(group.id)
    ).result.then (bucket) ->
      # TODO add new bucket in proper sort order
      round.buckets.splice(0, 0, bucket)
      # re-setup watches
      $scope.unwatch()
      $scope.unwatch = $scope.watchBuckets()

  $scope.watchBuckets = ->
    unwatches = _.map round.buckets, (bucket, index) ->
      # get current user's contribution
      myContribution = bucket.getMyContribution($scope.currentUserId)
      bucket.getPercentageFunded()
      bucket.getMyContributionPercentage()
      bucket.getGroupContribution()

      $scope.$watch "round.buckets["+index+"].myContribution.amountDollars", (amountDollars, oldAmountDollars) ->

        # if amountDollars is Not a Number (NaN)
        if amountDollars != 0 and not amountDollars
          # don't accept number
          bucket.myContribution.amountDollars = oldAmountDollars

        round.getMyAllocationsLeftCents(round.myAllocationsAmountCents)

        if round.myAllocationsLeftCents < 0
          bucket.myContribution.amountCents += round.myAllocationsLeftCents

        $scope.status = round.getStatus()

        if amountDollars >= 0
          bucket.getMyContributionPercentage()
          # ensure progress bar does not overfill
          bucket.myContributionPercentage = Math.min(bucket.myContributionPercentage, 100 - bucket.groupContributionPercentage)

    ->
      _.each unwatches, (unwatch) -> unwatch()

  $scope.openNewBucketModal = ->
    $modal.open(
      template: require('./new-bucket-modal.html')
      controller: require('./new-bucket-modal.coffee')
      size: 'lg'
      resolve:
        round: ->
          round
        group: ->
          group
        memberships: (MembershipsStore) ->
          MembershipsStore.all(group.id)
    ).result.then (bucket) ->
      # TODO add new bucket in proper sort order
      round.buckets.splice(0, 0, bucket)
      # re-setup watches
      $scope.unwatch()
      $scope.unwatch = $scope.watchBuckets()

  $scope.watchBuckets = ->
    unwatches = _.map round.buckets, (bucket, index) ->
      # get current user's contribution
      myContribution = bucket.getMyContribution($scope.currentUserId)
      bucket.getPercentageFunded()
      bucket.getMyContributionPercentage()
      bucket.getGroupContribution()

      $scope.$watch "round.buckets["+index+"].myContribution.amountDollars", (amountDollars, oldAmountDollars) ->

        # if amountDollars is Not a Number (NaN)
        if amountDollars != 0 and not amountDollars
          # don't accept number
          bucket.myContribution.amountDollars = oldAmountDollars

        round.getMyAllocationsLeftCents(round.myAllocationsAmountCents)

        if round.myAllocationsLeftCents < 0
          bucket.myContribution.amountCents += round.myAllocationsLeftCents

        $scope.status = round.getStatus()

        if amountDollars >= 0
          bucket.getMyContributionPercentage()
          # ensure progress bar does not overfill
          bucket.myContributionPercentage = Math.min(bucket.myContributionPercentage, 100 - bucket.groupContributionPercentage)

    ->
      _.each unwatches, (unwatch) -> unwatch()

  $scope.groupId = $stateParams.groupId
  $scope.status = null

  $scope.round = round
  $scope.loadContributorDetails()

  $scope.unwatch = $scope.watchBuckets()

  round.getMyContributions()

  #Find total cents contributed to round for bucket list sum
  totalCentsContributed = 0
  for bucket in $scope.round.buckets
    totalCentsContributed += bucket.contributionTotalCents

  #Find total round funds for bucket list sum
  roundFundsTotalCents = 0
  for allocation in $scope.round.allocations
    roundFundsTotalCents += allocation.amountCents

  $scope.round.totalAllocable = roundFundsTotalCents / 100
  $scope.round.totalAllocated = totalCentsContributed / 100

  $scope.timeLeft = round.endsAt.fromNow(true)
